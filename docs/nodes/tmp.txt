

Installazione rust: linguaggio per la compilazione del TmKms

# Opzione 1











Configurare il service
Configurare il service del Kms per farlo partire in automatico
sudo tee /etc/systemd/system/tmkms.service > /dev/null <<EOF 
[Unit]
Description=Commercio tmkms
After=network.target

[Service]
User=tmkms
WorkingDirectory=/data_tmkms/tmkms/.cargo/bin
ExecStart=/data_tmkms/tmkms/.cargo/bin/tmkms start -c /data_tmkms/tmkms/kms/commercio/tmkms.toml
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=tmkms
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl enable tmkms

sudo systemctl start tmkms


Configurazione TmKms [Nodo multiplo]




Devono essere cambiati i seguenti parametri per ogni file 

state_file:  non deve essere lo stesso altrimenti si incorrerebbe nella doppia segnature
addr: deve essere quello del nodo validatore interessato dalla segnatura
secret_key: meglio separare ogni secret key della connessione al nodo validatore
keys->key: la chiave deve essere quella che si vuole utilizzare

Nei file deve essere impostato l’adapter 

adapter = { type = "http", addr = "tcp://127.0.0.1:12345" }

Commentare o togliere 

adapter = { type = "usb" }


Generare le chiavi (con backup)
tmkms yubihsm keys generate 1 -b tmkms1.enc -c /data_tmkms/tmkms/kms/commercio/tmkms1.toml
tmkms yubihsm keys generate 2 -b tmkms2.enc -c /data_tmkms/tmkms/kms/commercio/tmkms2.toml

Testare i servizi

tmkms start -c /data_tmkms/tmkms/kms/commercio/tmkms1.toml
tmkms start -c /data_tmkms/tmkms/kms/commercio/tmkms2.toml

Per verificare le chiavi usare
tmkms yubihsm keys list  -c /data_tmkms/tmkms/kms/commercio/tmkms1.toml
tmkms yubihsm keys list  -c /data_tmkms/tmkms/kms/commercio/tmkms2.toml

Creare i service per i nuovi client kms
sudo tee /etc/systemd/system/tmkms1.service > /dev/null <<EOF 
[Unit]
Description=Commercio tmkms 1
After=network.target

[Service]
User=tmkms
WorkingDirectory=/data_tmkms/tmkms/.cargo/bin
ExecStart=/data_tmkms/tmkms/.cargo/bin/tmkms start -c /data_tmkms/tmkms/kms/commercio/tmkms1.toml
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=tmkms1
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl enable tmkms1

sudo systemctl start tmkms1

journalctl -u tmkms1.service -f


sudo tee /etc/systemd/system/tmkms2.service > /dev/null <<EOF 
[Unit]
Description=Commercio tmkms 2
After=network.target

[Service]
User=tmkms
WorkingDirectory=/data_tmkms/tmkms/.cargo/bin
ExecStart=/data_tmkms/tmkms/.cargo/bin/tmkms start -c /data_tmkms/tmkms/kms/commercio/tmkms2.toml
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=tmkms2
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl enable tmkms2

sudo systemctl start tmkms2

journalctl -u tmkms2.service -f
Configurazione Full/Sentry Node
Premessa
Tutte le azioni illustrate in questo parte e nella successiva guida per il validator node possono essere svolte utilizzando dei tools di automazione tipo ansible, puppet, chef ecc. ecc.

Tutte le automazioni però hanno una certa dipendenza da come verrà strutturata la rete dei nodi e quindi potrebbero variare a secondo di chi deve svolgere l’installazione e gestirla. Di seguito sono date delle istruzioni standard con qualche comando di automazione in semplice script shell.

Anche per l’eventuale installazione di macchine virtuali in cloud è preferibile usare sistemi tipo terraform o simili.

Da valutare poi l’installazione attraverso docker.

Creazione utente
Creazione utente non privilegiato e privo di shell per installare il full node

mkdir /opt/cnd
sudo useradd -m -d /opt/cnd --system --shell /usr/sbin/nologin cnd


sudo -u cnd mkdir -p /opt/cnd/config

Scaricamento dati della chain
CHAIN_VERSION=<chain-version>
cd
rm -rf commercio-chains
git clone https://github.com/commercionetwork/chains.git commercio-chains
CHAIN_DATA_FOLDER=”$HOME/commercio-chains/commercio-$CHAIN_VERSION”
CHAIN_DATA_FILE=”$CHAIN_DATA_FOLDER/.data”
CHAIN_VERSION=commercio-$(cat $CHAIN_DATA_FILE | grep -oP 'Name\s+\K\S+')
CHAIN_BIN_RELEASE=commercio-$(cat $CHAIN_DATA_FILE | grep -oP Release\s+\K\S+')
CHAIN_PER_PEERS=commercio-$(cat $CHAIN_DATA_FILE | grep -oP Persistent peers\s+\K\S+')
CHAIN_SEEDS=commercio-$(cat $CHAIN_DATA_FILE | grep -oP Seeds\s+\K\S+')
CHAIN_GEN_CHECKSUM=commercio-$(cat $CHAIN_DATA_FILE | grep -oP Genesis Checksum\s+\K\S+')

Installazione binari
wget "https://github.com/commercionetwork/commercionetwork/releases/download/$CHAIN_BIN_RELEASE/Linux-AMD64.zip"
unzip -o Linux-AMD64.zip 
sudo cp cn* /bin/

Installazione configurazioni
Eseguire un reset della chain (questo inizializza anche la struttura delle cartelle) e installare le configurazioni della chain che si sta installando.

sudo -u cnd /bin/cnd unsafe-reset-all --home=/opt/cnd
sudo cp $CHAIN_DATA_FOLDER/genesis.json /opt/cnd/config/.
sudo sed -e "s|persistent_peers = \".*\"|persistent_peers = \"$CHAIN_PER_PEERS\"|g" /opt/cnd/config/config.toml | \
  sed -e "s|addr_book_strict = \".*\"|addr_book_strict = \"false\"|g" | \ 
  sed -e "s|seeds = \".*\"|seeds = \"$CHAIN_SEEDS\"|g" \ >
  /opt/cnd/config/config.toml.tmp
sudo mv /opt/cnd/config/config.toml.tmp /opt/cnd/config/config.toml

Cambiare i permessi della home dell’utente cnd
	sudo chown -R cnd /opt/cnd
Creazione e avvio del service
sudo tee /etc/systemd/system/cnd.service > /dev/null <<EOF
[Unit]
Description=Commercio Node
After=network-online.target

[Service]
User=cnd 
ExecStart=/bin/cnd start --home=/opt/cnd/
Restart=always
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF


sudo systemctl enable cnd

sudo systemctl start cnd



Configurazione Validator Node

Per creare il nodo validatore possiamo partire dallo stesso tipo di installazione del sentry node.
Configurazione nodo con KMS
Configurare il nome che si vuole attribuire al nodo (i sentry node di default prendono il nome host).

NODENAME=”nome_nodo”

Accedere ai sentry node e ottenere gli id. Per ogni sentry node usare il comando

sudo printf $(/bin/cnd tendermint show-node-id --home /opt/cnd)@$(ifconfig | fgrep "inet " | fgrep -v "127.0.0.1" | fgrep "10.1." | fgrep -v "10.1.1" | awk '{print $2}'):26656 > node_id.$(/bin/cnd tendermint show-node-id --home /opt/cnd).txt
	
Attenzione: in questo comando si è supposto che il sentry node sia su una rete separata rispetto alla vpn del validator node e del kms. Le istruzioni in grassetto hanno questa implicazione. Questa estrazione delle informazioni è strettamente legato alla struttura delle rete che si sta implementando e che generalmente non può essere omogenea in generale sulle varie installazione di nodi.


E’ necessario modificare la configurazione del nodo validatore  in modo che il KMS possa connettersi e che possa connettersi ai sentry node.

Ottenere le informazioni del validator node

sudo printf $(/bin/cnd tendermint show-node-id --home /opt/cnd)@$(ifconfig | fgrep "inet " | fgrep -v "127.0.0.1" | fgrep "10.1.1" | awk '{print $2}'):26656 > node_id.val.txt


Ottenere le configurazioni dai sentry node

for S_NODE in $LIST_S_NODES; do
scp $S_NODE:node_id* .
done

Costruire la stringa di configurazione per il config.toml

for S_NODE_INFO  in node_id*; do
S_NODES_IDS=$S_NODES_IDS”,”$S_NODE_INFO
done

Immettere le configurazioni nel config.toml del nodo validatore

sudo sed -e "s|priv_validator_key_file = \"config/priv_validator_key.json\"|#priv_validator_key_file = \"config/priv_validator_key.json\"|g" /opt/cnd/config/config.toml | \
  sed -e "s|#priv_validator_laddr = \"tcp://.*:26658\"|priv_validator_laddr = \"tcp://10.1.1.254:26658\"|g" | \
  sed -e "s|moniker = \".*\"|moniker = \"$NODENAME\""|g" | \ 
  sed -e "s|persistent_peers = \"(.*)\"|persistent_peers = \"\1$S_NODES_IDS\"|g" | \
  sed -e "s|pex = \".*\"|pex = \"false\"|g" | \
  sed -e "s|addr_book_strict = \".*\"|addr_book_strict = \"false\"|g" > \
  /opt/cnd/config/config.toml.tmp
sudo mv /opt/cnd/config/config.toml.tmp /opt/cnd/config/config.toml
sudo chown -R cnd /opt/cnd

Attenzione: non deve essere fatto ripartire il validator node in questo momento, perché dobbiamo ancora trasferire le informazioni del nodo validatore ai nodi sentry, per non diffondere le proprie informazioni

Trasferire le informazioni del validator node ai senry node

for S_NODE in $LIST_S_NODES; do
scp node_id.val.txt $S_NODE:.
done

Per ogni sentry node deve essere inserito nelle configurazioni le informazioni del validator node per non diffonderle nella rete p2p

sed -e "s|private_peer_ids = \".*\"|private_peer_ids = \"$(cat node_id.val.txt)\"|g" /opt/cnd/config/config.toml > /opt/cnd/config/config.toml.tmp
sudo mv /opt/cnd/config/config.toml.tmp /opt/cnd/config/config.toml
sudo chown -R cnd /opt/cnd
sudo systemctl stop cnd; sleep 7; sudo systemctl start cnd

Avviare il nodo validatore

sudo systemctl start cnd

Controllare l’output dei logs del kms dovrebbero variare in questa maniera

Jan 11 09:23:14.389  INFO tmkms::session: [commercio-testnet6002@tcp://10.1.1.254:26658] connected to validator successfully
Jan 11 09:23:14.389  WARN tmkms::session: [commercio-testnet6002] tcp:/10.1.1.254:26658: unverified validator peer ID! (A312D8F64C9FC71A1A947C377F64B7302C951361)

Controllare l’output dei logs del validator node. Dovrebbero riportare il funzionamento normale. Se qualcosa non funziona i blocchi in teoria non dovrebbero poter essere rilasciati


Creazione sulla chain nodo Validator Node
Se tutti i passaggi sono corretti e il nodo validatore funziona correttamente si può eseguire la transazione di creazione del nodo validatore.
Da qualsiasi postazione dotata del client cncli, il wallet, e un accesso a un full node possiamo lanciare il comando di creazione del nodo

cncli tx staking create-validator \
 --amount=50000000000ucommercio \
--pubkey=did:com:valconspub1zcjduepq592mn6xucyqvfrvjegruhnx55cruffkrfq0rryu809fzkgwg684qmetxxs \
  --moniker="nome_nodo" \
  --chain-id="commercio-testnet6002" \ 
  --details="nodo validatore di Commercio" \
  --commission-rate="0.10" --commission-max-rate="0.20" \
  --commission-max-change-rate="0.01" --min-self-delegation="1" \
  --from=did:com:1zcjduep… \
  --node=tcp://10.1.2.1:26657 \
  -y


Dove
--pubkey: la chiave pubblica del validatore fornita dal kms
--moniker: Nome del nodo
--chain-id: Id della chain per cui si sta creando il nodo (parametro non necessario se nelle configurazioni del client è già stato inserito)
--from: wallet contenente i token da delegare al validatore
--node: un full node a cui si ha accesso con la porta 26657 in ascolto

Se la transazione di creazione del nodo è andata a buon fine i logs del kms dovrebbe cominciare a mostrare le operazioni di PreVote e PreCommit.

Considerazioni
