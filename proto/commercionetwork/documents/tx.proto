syntax = "proto3";
package commercionetwork.commercionetwork.documents;

// Options section
option go_package = "github.com/commercionetwork/commercionetwork/x/documents/types";

// Import section
import "commercionetwork/documents/document.proto";
import "commercionetwork/documents/documentDoSign.proto";
import "commercionetwork/documents/documentEncryptionData.proto";
import "commercionetwork/documents/documentMetadataSchema.proto";
import "commercionetwork/documents/documentChecksum.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc ShareDocument(MsgShareDocument) returns (MsgShareDocumentResponse);
  rpc SendDocumentReceipt(MsgSendDocumentReceipt) returns (MsgSendDocumentReceiptResponse);
}

message MsgShareDocument {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "commercionetwork/MsgShareDocument";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated string recipients = 2;
  string UUID = 3;
  documents.DocumentMetadata metadata = 4;
  string contentURI = 5;
  documents.DocumentChecksum checksum = 6;
  documents.DocumentEncryptionData encryptionData = 7;
  documents.DocumentDoSign doSign = 8;
}

message MsgShareDocumentResponse {
  string UUID = 1;
}

message MsgSendDocumentReceipt {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "commercionetwork/MsgSendDocumentReceipt";

  string UUID = 1 ;
  string sender = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string recipient = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string txHash = 4;
  string DocumentUUID = 5;
  string proof = 6;  // Optional

}

message MsgSendDocumentReceiptResponse {
  string UUID = 1;
}
