// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commercionetwork/documents/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetDocumentRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (m *QueryGetDocumentRequest) Reset()         { *m = QueryGetDocumentRequest{} }
func (m *QueryGetDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDocumentRequest) ProtoMessage()    {}
func (*QueryGetDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{0}
}
func (m *QueryGetDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDocumentRequest.Merge(m, src)
}
func (m *QueryGetDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDocumentRequest proto.InternalMessageInfo

func (m *QueryGetDocumentRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type QueryGetDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document,proto3" json:"Document,omitempty"`
}

func (m *QueryGetDocumentResponse) Reset()         { *m = QueryGetDocumentResponse{} }
func (m *QueryGetDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDocumentResponse) ProtoMessage()    {}
func (*QueryGetDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{1}
}
func (m *QueryGetDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDocumentResponse.Merge(m, src)
}
func (m *QueryGetDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDocumentResponse proto.InternalMessageInfo

func (m *QueryGetDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type QueryGetSentDocumentsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetSentDocumentsRequest) Reset()         { *m = QueryGetSentDocumentsRequest{} }
func (m *QueryGetSentDocumentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentDocumentsRequest) ProtoMessage()    {}
func (*QueryGetSentDocumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{2}
}
func (m *QueryGetSentDocumentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentDocumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentDocumentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentDocumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentDocumentsRequest.Merge(m, src)
}
func (m *QueryGetSentDocumentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentDocumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentDocumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentDocumentsRequest proto.InternalMessageInfo

func (m *QueryGetSentDocumentsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetSentDocumentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentDocumentsResponse struct {
	Document   []*Document         `protobuf:"bytes,1,rep,name=Document,proto3" json:"Document,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetSentDocumentsResponse) Reset()         { *m = QueryGetSentDocumentsResponse{} }
func (m *QueryGetSentDocumentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentDocumentsResponse) ProtoMessage()    {}
func (*QueryGetSentDocumentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{3}
}
func (m *QueryGetSentDocumentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentDocumentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentDocumentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentDocumentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentDocumentsResponse.Merge(m, src)
}
func (m *QueryGetSentDocumentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentDocumentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentDocumentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentDocumentsResponse proto.InternalMessageInfo

func (m *QueryGetSentDocumentsResponse) GetDocument() []*Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *QueryGetSentDocumentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceivedDocumentRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReceivedDocumentRequest) Reset()         { *m = QueryGetReceivedDocumentRequest{} }
func (m *QueryGetReceivedDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceivedDocumentRequest) ProtoMessage()    {}
func (*QueryGetReceivedDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{4}
}
func (m *QueryGetReceivedDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentRequest.Merge(m, src)
}
func (m *QueryGetReceivedDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentRequest proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetReceivedDocumentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceivedDocumentResponse struct {
	ReceivedDocument []*Document         `protobuf:"bytes,1,rep,name=ReceivedDocument,proto3" json:"ReceivedDocument,omitempty"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReceivedDocumentResponse) Reset()         { *m = QueryGetReceivedDocumentResponse{} }
func (m *QueryGetReceivedDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceivedDocumentResponse) ProtoMessage()    {}
func (*QueryGetReceivedDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{5}
}
func (m *QueryGetReceivedDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentResponse.Merge(m, src)
}
func (m *QueryGetReceivedDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentResponse proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentResponse) GetReceivedDocument() []*Document {
	if m != nil {
		return m.ReceivedDocument
	}
	return nil
}

func (m *QueryGetReceivedDocumentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceivedDocumentUuidRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	UUID    string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (m *QueryGetReceivedDocumentUuidRequest) Reset()         { *m = QueryGetReceivedDocumentUuidRequest{} }
func (m *QueryGetReceivedDocumentUuidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceivedDocumentUuidRequest) ProtoMessage()    {}
func (*QueryGetReceivedDocumentUuidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{6}
}
func (m *QueryGetReceivedDocumentUuidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentUuidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentUuidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentUuidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentUuidRequest.Merge(m, src)
}
func (m *QueryGetReceivedDocumentUuidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentUuidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentUuidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentUuidRequest proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentUuidRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetReceivedDocumentUuidRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type QueryGetReceivedDocumentUuidResponse struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (m *QueryGetReceivedDocumentUuidResponse) Reset()         { *m = QueryGetReceivedDocumentUuidResponse{} }
func (m *QueryGetReceivedDocumentUuidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceivedDocumentUuidResponse) ProtoMessage()    {}
func (*QueryGetReceivedDocumentUuidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{7}
}
func (m *QueryGetReceivedDocumentUuidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentUuidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentUuidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentUuidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentUuidResponse.Merge(m, src)
}
func (m *QueryGetReceivedDocumentUuidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentUuidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentUuidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentUuidResponse proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentUuidResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type QueryGetSentDocumentsReceiptsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetSentDocumentsReceiptsRequest) Reset()         { *m = QueryGetSentDocumentsReceiptsRequest{} }
func (m *QueryGetSentDocumentsReceiptsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentDocumentsReceiptsRequest) ProtoMessage()    {}
func (*QueryGetSentDocumentsReceiptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{8}
}
func (m *QueryGetSentDocumentsReceiptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentDocumentsReceiptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentDocumentsReceiptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentDocumentsReceiptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentDocumentsReceiptsRequest.Merge(m, src)
}
func (m *QueryGetSentDocumentsReceiptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentDocumentsReceiptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentDocumentsReceiptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentDocumentsReceiptsRequest proto.InternalMessageInfo

func (m *QueryGetSentDocumentsReceiptsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetSentDocumentsReceiptsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentDocumentsReceiptsResponse struct {
	Receipt    []*DocumentReceipt  `protobuf:"bytes,1,rep,name=receipt,proto3" json:"receipt,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetSentDocumentsReceiptsResponse) Reset()         { *m = QueryGetSentDocumentsReceiptsResponse{} }
func (m *QueryGetSentDocumentsReceiptsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentDocumentsReceiptsResponse) ProtoMessage()    {}
func (*QueryGetSentDocumentsReceiptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{9}
}
func (m *QueryGetSentDocumentsReceiptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentDocumentsReceiptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentDocumentsReceiptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentDocumentsReceiptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentDocumentsReceiptsResponse.Merge(m, src)
}
func (m *QueryGetSentDocumentsReceiptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentDocumentsReceiptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentDocumentsReceiptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentDocumentsReceiptsResponse proto.InternalMessageInfo

func (m *QueryGetSentDocumentsReceiptsResponse) GetReceipt() []*DocumentReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *QueryGetSentDocumentsReceiptsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceivedDocumentsReceiptsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) Reset() {
	*m = QueryGetReceivedDocumentsReceiptsRequest{}
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceivedDocumentsReceiptsRequest) ProtoMessage()    {}
func (*QueryGetReceivedDocumentsReceiptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{10}
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentsReceiptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentsReceiptsRequest.Merge(m, src)
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentsReceiptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentsReceiptsRequest proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentsReceiptsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceivedDocumentsReceiptsResponse struct {
	ReceiptReceived []*DocumentReceipt  `protobuf:"bytes,1,rep,name=ReceiptReceived,proto3" json:"ReceiptReceived,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) Reset() {
	*m = QueryGetReceivedDocumentsReceiptsResponse{}
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReceivedDocumentsReceiptsResponse) ProtoMessage() {}
func (*QueryGetReceivedDocumentsReceiptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{11}
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceivedDocumentsReceiptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceivedDocumentsReceiptsResponse.Merge(m, src)
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceivedDocumentsReceiptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceivedDocumentsReceiptsResponse proto.InternalMessageInfo

func (m *QueryGetReceivedDocumentsReceiptsResponse) GetReceiptReceived() []*DocumentReceipt {
	if m != nil {
		return m.ReceiptReceived
	}
	return nil
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDocumentsReceiptsRequest struct {
	UUID       string             `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetDocumentsReceiptsRequest) Reset()         { *m = QueryGetDocumentsReceiptsRequest{} }
func (m *QueryGetDocumentsReceiptsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDocumentsReceiptsRequest) ProtoMessage()    {}
func (*QueryGetDocumentsReceiptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{12}
}
func (m *QueryGetDocumentsReceiptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDocumentsReceiptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDocumentsReceiptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDocumentsReceiptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDocumentsReceiptsRequest.Merge(m, src)
}
func (m *QueryGetDocumentsReceiptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDocumentsReceiptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDocumentsReceiptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDocumentsReceiptsRequest proto.InternalMessageInfo

func (m *QueryGetDocumentsReceiptsRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QueryGetDocumentsReceiptsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDocumentsReceiptsResponse struct {
	Receipts   []*DocumentReceipt  `protobuf:"bytes,1,rep,name=Receipts,proto3" json:"Receipts,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetDocumentsReceiptsResponse) Reset()         { *m = QueryGetDocumentsReceiptsResponse{} }
func (m *QueryGetDocumentsReceiptsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDocumentsReceiptsResponse) ProtoMessage()    {}
func (*QueryGetDocumentsReceiptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6616a5be2e29b0f9, []int{13}
}
func (m *QueryGetDocumentsReceiptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDocumentsReceiptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDocumentsReceiptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDocumentsReceiptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDocumentsReceiptsResponse.Merge(m, src)
}
func (m *QueryGetDocumentsReceiptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDocumentsReceiptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDocumentsReceiptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDocumentsReceiptsResponse proto.InternalMessageInfo

func (m *QueryGetDocumentsReceiptsResponse) GetReceipts() []*DocumentReceipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *QueryGetDocumentsReceiptsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetDocumentRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetDocumentRequest")
	proto.RegisterType((*QueryGetDocumentResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetDocumentResponse")
	proto.RegisterType((*QueryGetSentDocumentsRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetSentDocumentsRequest")
	proto.RegisterType((*QueryGetSentDocumentsResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetSentDocumentsResponse")
	proto.RegisterType((*QueryGetReceivedDocumentRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentRequest")
	proto.RegisterType((*QueryGetReceivedDocumentResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentResponse")
	proto.RegisterType((*QueryGetReceivedDocumentUuidRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentUuidRequest")
	proto.RegisterType((*QueryGetReceivedDocumentUuidResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentUuidResponse")
	proto.RegisterType((*QueryGetSentDocumentsReceiptsRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetSentDocumentsReceiptsRequest")
	proto.RegisterType((*QueryGetSentDocumentsReceiptsResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetSentDocumentsReceiptsResponse")
	proto.RegisterType((*QueryGetReceivedDocumentsReceiptsRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentsReceiptsRequest")
	proto.RegisterType((*QueryGetReceivedDocumentsReceiptsResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetReceivedDocumentsReceiptsResponse")
	proto.RegisterType((*QueryGetDocumentsReceiptsRequest)(nil), "commercionetwork.commercionetwork.documents.QueryGetDocumentsReceiptsRequest")
	proto.RegisterType((*QueryGetDocumentsReceiptsResponse)(nil), "commercionetwork.commercionetwork.documents.QueryGetDocumentsReceiptsResponse")
}

func init() {
	proto.RegisterFile("commercionetwork/documents/query.proto", fileDescriptor_6616a5be2e29b0f9)
}

var fileDescriptor_6616a5be2e29b0f9 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0x66, 0xea, 0x07, 0xf8, 0x1a, 0xa2, 0x4e, 0x34, 0xd6, 0x0d, 0x56, 0xac, 0x8a, 0x20, 0x61,
	0x57, 0x40, 0x34, 0x2a, 0x41, 0x63, 0x10, 0x82, 0x11, 0x43, 0x4b, 0x4a, 0x88, 0xb7, 0x6d, 0x3b,
	0xd6, 0x8d, 0x76, 0xa7, 0xec, 0x6c, 0x51, 0x62, 0x30, 0x46, 0x2e, 0x26, 0x7a, 0x30, 0xf1, 0xaf,
	0x78, 0xf3, 0x6e, 0x38, 0x18, 0x43, 0xe2, 0xc5, 0x83, 0x07, 0x43, 0xfd, 0x01, 0xdc, 0xbd, 0x98,
	0xce, 0xce, 0x6e, 0xcb, 0x7e, 0x40, 0xb7, 0x8c, 0x7a, 0x5b, 0x86, 0x77, 0x9e, 0x79, 0x3e, 0x66,
	0xde, 0x99, 0x42, 0x5f, 0x81, 0x96, 0xcb, 0xc4, 0x2a, 0x18, 0xd4, 0x24, 0xf6, 0x33, 0x6a, 0x3d,
	0xd1, 0x8a, 0xb4, 0x50, 0x2d, 0x13, 0xd3, 0x66, 0xda, 0x52, 0x95, 0x58, 0x2b, 0x6a, 0xc5, 0xa2,
	0x36, 0xc5, 0x83, 0xfe, 0x3a, 0x35, 0x30, 0xe0, 0x4d, 0x54, 0x7a, 0x4a, 0x94, 0x96, 0x9e, 0x12,
	0x4d, 0xaf, 0x18, 0x9a, 0x6e, 0x9a, 0xd4, 0xd6, 0x6d, 0x83, 0x9a, 0xcc, 0x81, 0x52, 0x2e, 0x15,
	0x28, 0x2b, 0x53, 0xa6, 0xe5, 0x75, 0x46, 0x9c, 0x35, 0xb4, 0xe5, 0xe1, 0x3c, 0xb1, 0xf5, 0x61,
	0xad, 0xa2, 0x97, 0x0c, 0x93, 0x17, 0x8b, 0xda, 0x81, 0x1d, 0xe8, 0xb9, 0x5f, 0xa2, 0xf4, 0x72,
	0x0b, 0xa5, 0x59, 0x52, 0x20, 0x46, 0x45, 0xcc, 0x48, 0x0f, 0xc1, 0xc9, 0x4c, 0x7d, 0xf9, 0x69,
	0x62, 0x4f, 0x7a, 0x05, 0x4b, 0x55, 0xc2, 0x6c, 0x8c, 0x61, 0x7f, 0x2e, 0x37, 0x33, 0x99, 0x44,
	0xbd, 0xa8, 0xff, 0x50, 0x96, 0x7f, 0xa7, 0xcb, 0x90, 0x0c, 0x96, 0xb3, 0x0a, 0x35, 0x19, 0xc1,
	0x19, 0xe8, 0x72, 0xc7, 0xf8, 0x9c, 0xc3, 0x23, 0x63, 0x6a, 0x0c, 0xc7, 0x54, 0x0f, 0xd0, 0x83,
	0x49, 0xbf, 0x42, 0xd0, 0xe3, 0xae, 0x37, 0x4f, 0x4c, 0x6f, 0x4d, 0xe6, 0x72, 0x4c, 0x42, 0xa7,
	0x5e, 0x2c, 0x5a, 0x84, 0x31, 0x41, 0xd3, 0xfd, 0x13, 0x4f, 0x01, 0x34, 0x9c, 0x4c, 0x26, 0x38,
	0x9f, 0x3e, 0xd5, 0xb1, 0x5d, 0xad, 0xdb, 0xae, 0x3a, 0xd1, 0x0a, 0xdb, 0xd5, 0x39, 0xbd, 0x44,
	0x04, 0x6a, 0xb6, 0x69, 0x66, 0xfa, 0x13, 0x82, 0xd3, 0x11, 0x14, 0x42, 0x75, 0xef, 0x93, 0xa0,
	0x1b, 0x4f, 0x87, 0x90, 0xbf, 0xb8, 0x2b, 0x79, 0x87, 0xcf, 0x36, 0xf6, 0x6b, 0x08, 0xce, 0xb8,
	0xec, 0x79, 0xf0, 0xcb, 0xa4, 0xe8, 0xcf, 0xf9, 0xef, 0x7b, 0xf8, 0x15, 0x41, 0x6f, 0x34, 0x0b,
	0x61, 0xa3, 0x0e, 0x47, 0xfd, 0xff, 0xdb, 0x9b, 0x9d, 0x01, 0x38, 0x79, 0xb6, 0xce, 0xc3, 0xb9,
	0x28, 0x3d, 0xb9, 0xaa, 0x51, 0xdc, 0xdd, 0x59, 0xf7, 0x6c, 0x25, 0x9a, 0xce, 0xd6, 0x0d, 0x38,
	0xbf, 0x33, 0xa8, 0x30, 0x2a, 0xec, 0x5c, 0xbe, 0x41, 0x8d, 0xc9, 0xbe, 0x5d, 0xca, 0x4f, 0xfb,
	0x3f, 0x3c, 0x30, 0xeb, 0x08, 0x2e, 0xec, 0x42, 0x45, 0x08, 0x59, 0x80, 0x4e, 0xcb, 0x19, 0x13,
	0x41, 0x8f, 0xb7, 0x17, 0xb4, 0x83, 0x91, 0x75, 0xc1, 0xe4, 0xc5, 0xfc, 0x0e, 0x41, 0x7f, 0x54,
	0x24, 0xff, 0xc1, 0xd9, 0x1f, 0x08, 0x06, 0x5a, 0xa0, 0x23, 0xdc, 0x7d, 0x04, 0x47, 0x5c, 0x67,
	0x44, 0xad, 0x14, 0x97, 0xfd, 0xa0, 0xf2, 0xdc, 0x7e, 0xd9, 0x68, 0x12, 0x91, 0x26, 0x87, 0xec,
	0x7d, 0x69, 0xf6, 0x7e, 0x46, 0x70, 0x76, 0x07, 0x02, 0xc2, 0xd6, 0x45, 0xe8, 0x72, 0xc7, 0xa4,
	0xf8, 0xe9, 0xa1, 0x49, 0x33, 0x72, 0xe4, 0x63, 0x37, 0x1c, 0xe0, 0x42, 0xf0, 0x17, 0xd4, 0xb8,
	0x9b, 0xf0, 0x64, 0x2c, 0x9e, 0x11, 0xaf, 0x02, 0xe5, 0xee, 0x1e, 0x51, 0x1c, 0xbe, 0xe9, 0xd1,
	0xd7, 0xdf, 0x7e, 0x7d, 0x48, 0x0c, 0xe1, 0x41, 0xad, 0x85, 0x27, 0x8b, 0xf6, 0xa2, 0x1e, 0xf4,
	0x2a, 0xae, 0x21, 0xe8, 0xde, 0xd6, 0x52, 0xf0, 0x4c, 0x5b, 0x6c, 0xc2, 0x9e, 0x12, 0xca, 0x3d,
	0x19, 0x50, 0x42, 0xdd, 0x4d, 0xae, 0x6e, 0x0c, 0x8f, 0xb6, 0xa6, 0x4e, 0x34, 0x8a, 0x55, 0x8d,
	0xd5, 0x73, 0xda, 0x42, 0xc1, 0x9b, 0x10, 0xdf, 0x6f, 0x8b, 0x5d, 0xc4, 0x95, 0xaf, 0xcc, 0x4a,
	0x42, 0x13, 0x72, 0x6f, 0x71, 0xb9, 0xd7, 0xf1, 0xb5, 0x98, 0x72, 0x2d, 0xb7, 0x87, 0xfc, 0x46,
	0x70, 0x22, 0xf4, 0xae, 0xc0, 0x19, 0x19, 0xa9, 0x6c, 0xeb, 0x21, 0x4a, 0x56, 0x26, 0x64, 0x9c,
	0xc0, 0xc5, 0xfd, 0xc4, 0xfc, 0x81, 0xbf, 0x4d, 0xc0, 0xa9, 0xc8, 0x7e, 0x8e, 0x73, 0x52, 0xb2,
	0x0a, 0xb8, 0xb0, 0x20, 0x1b, 0x36, 0xce, 0x5e, 0x08, 0x71, 0xc2, 0xdb, 0x0b, 0x5b, 0x08, 0x8e,
	0x05, 0x5d, 0x98, 0xdd, 0x53, 0xdb, 0x09, 0xa8, 0x7f, 0x20, 0x0b, 0x4e, 0xa8, 0x1e, 0xe7, 0xaa,
	0xaf, 0xe2, 0x2b, 0x31, 0xda, 0x99, 0xe7, 0x02, 0x5e, 0x4b, 0xc0, 0xf1, 0xb0, 0x27, 0x1f, 0x9e,
	0x93, 0x12, 0x52, 0xd3, 0x93, 0x54, 0xc9, 0x48, 0x44, 0x14, 0xda, 0xa7, 0xb8, 0xf6, 0xdb, 0x78,
	0xa2, 0xcd, 0xd3, 0x2f, 0xec, 0xb8, 0xb3, 0xb8, 0xbe, 0x99, 0x42, 0x1b, 0x9b, 0x29, 0xf4, 0x73,
	0x33, 0x85, 0xde, 0xd7, 0x52, 0x1d, 0x1b, 0xb5, 0x54, 0xc7, 0xf7, 0x5a, 0xaa, 0xe3, 0xe1, 0x44,
	0xc9, 0xb0, 0x1f, 0x57, 0xf3, 0x75, 0xa6, 0xc1, 0x35, 0x02, 0x03, 0xcf, 0x9b, 0x96, 0xb5, 0x57,
	0x2a, 0x84, 0xe5, 0x0f, 0xf2, 0xdf, 0xba, 0xa3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xad,
	0x30, 0xfb, 0xe9, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	// Queries a Document by id.
	Document(ctx context.Context, in *QueryGetDocumentRequest, opts ...grpc.CallOption) (*QueryGetDocumentResponse, error)
	// Queries a list of sent Document items.
	SentDocuments(ctx context.Context, in *QueryGetSentDocumentsRequest, opts ...grpc.CallOption) (*QueryGetSentDocumentsResponse, error)
	// Queries a list of received Document items.
	ReceivedDocument(ctx context.Context, in *QueryGetReceivedDocumentRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentResponse, error)
	SentDocumentsReceipts(ctx context.Context, in *QueryGetSentDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetSentDocumentsReceiptsResponse, error)
	// Queries a list of Document items.
	ReceivedDocumentsReceipts(ctx context.Context, in *QueryGetReceivedDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentsReceiptsResponse, error)
	DocumentsReceipts(ctx context.Context, in *QueryGetDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetDocumentsReceiptsResponse, error)
	// Queries a list of received Document items uuid.
	ReceivedDocumentUuid(ctx context.Context, in *QueryGetReceivedDocumentUuidRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentUuidResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Document(ctx context.Context, in *QueryGetDocumentRequest, opts ...grpc.CallOption) (*QueryGetDocumentResponse, error) {
	out := new(QueryGetDocumentResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/Document", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentDocuments(ctx context.Context, in *QueryGetSentDocumentsRequest, opts ...grpc.CallOption) (*QueryGetSentDocumentsResponse, error) {
	out := new(QueryGetSentDocumentsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/SentDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReceivedDocument(ctx context.Context, in *QueryGetReceivedDocumentRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentResponse, error) {
	out := new(QueryGetReceivedDocumentResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/ReceivedDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentDocumentsReceipts(ctx context.Context, in *QueryGetSentDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetSentDocumentsReceiptsResponse, error) {
	out := new(QueryGetSentDocumentsReceiptsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/SentDocumentsReceipts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReceivedDocumentsReceipts(ctx context.Context, in *QueryGetReceivedDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentsReceiptsResponse, error) {
	out := new(QueryGetReceivedDocumentsReceiptsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/ReceivedDocumentsReceipts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DocumentsReceipts(ctx context.Context, in *QueryGetDocumentsReceiptsRequest, opts ...grpc.CallOption) (*QueryGetDocumentsReceiptsResponse, error) {
	out := new(QueryGetDocumentsReceiptsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/DocumentsReceipts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReceivedDocumentUuid(ctx context.Context, in *QueryGetReceivedDocumentUuidRequest, opts ...grpc.CallOption) (*QueryGetReceivedDocumentUuidResponse, error) {
	out := new(QueryGetReceivedDocumentUuidResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.documents.Query/ReceivedDocumentUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	// Queries a Document by id.
	Document(context.Context, *QueryGetDocumentRequest) (*QueryGetDocumentResponse, error)
	// Queries a list of sent Document items.
	SentDocuments(context.Context, *QueryGetSentDocumentsRequest) (*QueryGetSentDocumentsResponse, error)
	// Queries a list of received Document items.
	ReceivedDocument(context.Context, *QueryGetReceivedDocumentRequest) (*QueryGetReceivedDocumentResponse, error)
	SentDocumentsReceipts(context.Context, *QueryGetSentDocumentsReceiptsRequest) (*QueryGetSentDocumentsReceiptsResponse, error)
	// Queries a list of Document items.
	ReceivedDocumentsReceipts(context.Context, *QueryGetReceivedDocumentsReceiptsRequest) (*QueryGetReceivedDocumentsReceiptsResponse, error)
	DocumentsReceipts(context.Context, *QueryGetDocumentsReceiptsRequest) (*QueryGetDocumentsReceiptsResponse, error)
	// Queries a list of received Document items uuid.
	ReceivedDocumentUuid(context.Context, *QueryGetReceivedDocumentUuidRequest) (*QueryGetReceivedDocumentUuidResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Document(ctx context.Context, req *QueryGetDocumentRequest) (*QueryGetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Document not implemented")
}
func (*UnimplementedQueryServer) SentDocuments(ctx context.Context, req *QueryGetSentDocumentsRequest) (*QueryGetSentDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentDocuments not implemented")
}
func (*UnimplementedQueryServer) ReceivedDocument(ctx context.Context, req *QueryGetReceivedDocumentRequest) (*QueryGetReceivedDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivedDocument not implemented")
}
func (*UnimplementedQueryServer) SentDocumentsReceipts(ctx context.Context, req *QueryGetSentDocumentsReceiptsRequest) (*QueryGetSentDocumentsReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentDocumentsReceipts not implemented")
}
func (*UnimplementedQueryServer) ReceivedDocumentsReceipts(ctx context.Context, req *QueryGetReceivedDocumentsReceiptsRequest) (*QueryGetReceivedDocumentsReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivedDocumentsReceipts not implemented")
}
func (*UnimplementedQueryServer) DocumentsReceipts(ctx context.Context, req *QueryGetDocumentsReceiptsRequest) (*QueryGetDocumentsReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentsReceipts not implemented")
}
func (*UnimplementedQueryServer) ReceivedDocumentUuid(ctx context.Context, req *QueryGetReceivedDocumentUuidRequest) (*QueryGetReceivedDocumentUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivedDocumentUuid not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Document_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Document(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/Document",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Document(ctx, req.(*QueryGetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/SentDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentDocuments(ctx, req.(*QueryGetSentDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReceivedDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReceivedDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceivedDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/ReceivedDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceivedDocument(ctx, req.(*QueryGetReceivedDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentDocumentsReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentDocumentsReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentDocumentsReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/SentDocumentsReceipts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentDocumentsReceipts(ctx, req.(*QueryGetSentDocumentsReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReceivedDocumentsReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReceivedDocumentsReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceivedDocumentsReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/ReceivedDocumentsReceipts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceivedDocumentsReceipts(ctx, req.(*QueryGetReceivedDocumentsReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DocumentsReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDocumentsReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DocumentsReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/DocumentsReceipts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DocumentsReceipts(ctx, req.(*QueryGetDocumentsReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReceivedDocumentUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReceivedDocumentUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceivedDocumentUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.documents.Query/ReceivedDocumentUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceivedDocumentUuid(ctx, req.(*QueryGetReceivedDocumentUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commercionetwork.commercionetwork.documents.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Document",
			Handler:    _Query_Document_Handler,
		},
		{
			MethodName: "SentDocuments",
			Handler:    _Query_SentDocuments_Handler,
		},
		{
			MethodName: "ReceivedDocument",
			Handler:    _Query_ReceivedDocument_Handler,
		},
		{
			MethodName: "SentDocumentsReceipts",
			Handler:    _Query_SentDocumentsReceipts_Handler,
		},
		{
			MethodName: "ReceivedDocumentsReceipts",
			Handler:    _Query_ReceivedDocumentsReceipts_Handler,
		},
		{
			MethodName: "DocumentsReceipts",
			Handler:    _Query_DocumentsReceipts_Handler,
		},
		{
			MethodName: "ReceivedDocumentUuid",
			Handler:    _Query_ReceivedDocumentUuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commercionetwork/documents/query.proto",
}

func (m *QueryGetDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentDocumentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentDocumentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentDocumentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentDocumentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentDocumentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentDocumentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Document) > 0 {
		for iNdEx := len(m.Document) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Document[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceivedDocument) > 0 {
		for iNdEx := len(m.ReceivedDocument) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedDocument[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentUuidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentUuidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentUuidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentUuidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentUuidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentUuidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentDocumentsReceiptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentDocumentsReceiptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentDocumentsReceiptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentDocumentsReceiptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentDocumentsReceiptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentDocumentsReceiptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receipt) > 0 {
		for iNdEx := len(m.Receipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceiptReceived) > 0 {
		for iNdEx := len(m.ReceiptReceived) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceiptReceived[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDocumentsReceiptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDocumentsReceiptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDocumentsReceiptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDocumentsReceiptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDocumentsReceiptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDocumentsReceiptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receipts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentDocumentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentDocumentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Document) > 0 {
		for _, e := range m.Document {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReceivedDocument) > 0 {
		for _, e := range m.ReceivedDocument {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentUuidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentUuidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentDocumentsReceiptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentDocumentsReceiptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receipt) > 0 {
		for _, e := range m.Receipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentsReceiptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceivedDocumentsReceiptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReceiptReceived) > 0 {
		for _, e := range m.ReceiptReceived {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDocumentsReceiptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDocumentsReceiptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &Document{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentDocumentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentDocumentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentDocumentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentDocumentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentDocumentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentDocumentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = append(m.Document, &Document{})
			if err := m.Document[len(m.Document)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedDocument = append(m.ReceivedDocument, &Document{})
			if err := m.ReceivedDocument[len(m.ReceivedDocument)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentUuidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentUuidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentUuidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentUuidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentUuidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentUuidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentDocumentsReceiptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentDocumentsReceiptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentDocumentsReceiptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentDocumentsReceiptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentDocumentsReceiptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentDocumentsReceiptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt, &DocumentReceipt{})
			if err := m.Receipt[len(m.Receipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentsReceiptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentsReceiptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentsReceiptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceivedDocumentsReceiptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentsReceiptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceivedDocumentsReceiptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptReceived = append(m.ReceiptReceived, &DocumentReceipt{})
			if err := m.ReceiptReceived[len(m.ReceiptReceived)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDocumentsReceiptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDocumentsReceiptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDocumentsReceiptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDocumentsReceiptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDocumentsReceiptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDocumentsReceiptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &DocumentReceipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
