// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commercionetwork/commerciokyc/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryInvitesRequest struct {
}

func (m *QueryInvitesRequest) Reset()         { *m = QueryInvitesRequest{} }
func (m *QueryInvitesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInvitesRequest) ProtoMessage()    {}
func (*QueryInvitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{0}
}
func (m *QueryInvitesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInvitesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInvitesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInvitesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInvitesRequest.Merge(m, src)
}
func (m *QueryInvitesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInvitesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInvitesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInvitesRequest proto.InternalMessageInfo

type QueryInvitesResponse struct {
	Invites []*Invite `protobuf:"bytes,1,rep,name=invites,proto3" json:"invites,omitempty"`
}

func (m *QueryInvitesResponse) Reset()         { *m = QueryInvitesResponse{} }
func (m *QueryInvitesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInvitesResponse) ProtoMessage()    {}
func (*QueryInvitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{1}
}
func (m *QueryInvitesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInvitesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInvitesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInvitesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInvitesResponse.Merge(m, src)
}
func (m *QueryInvitesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInvitesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInvitesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInvitesResponse proto.InternalMessageInfo

func (m *QueryInvitesResponse) GetInvites() []*Invite {
	if m != nil {
		return m.Invites
	}
	return nil
}

type QueryTspsRequest struct {
}

func (m *QueryTspsRequest) Reset()         { *m = QueryTspsRequest{} }
func (m *QueryTspsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTspsRequest) ProtoMessage()    {}
func (*QueryTspsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{2}
}
func (m *QueryTspsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTspsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTspsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTspsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTspsRequest.Merge(m, src)
}
func (m *QueryTspsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTspsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTspsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTspsRequest proto.InternalMessageInfo

type QueryTspsResponse struct {
	Tsps []string `protobuf:"bytes,1,rep,name=tsps,proto3" json:"tsps,omitempty"`
}

func (m *QueryTspsResponse) Reset()         { *m = QueryTspsResponse{} }
func (m *QueryTspsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTspsResponse) ProtoMessage()    {}
func (*QueryTspsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{3}
}
func (m *QueryTspsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTspsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTspsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTspsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTspsResponse.Merge(m, src)
}
func (m *QueryTspsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTspsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTspsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTspsResponse proto.InternalMessageInfo

func (m *QueryTspsResponse) GetTsps() []string {
	if m != nil {
		return m.Tsps
	}
	return nil
}

type QueryMembershipsRequest struct {
}

func (m *QueryMembershipsRequest) Reset()         { *m = QueryMembershipsRequest{} }
func (m *QueryMembershipsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMembershipsRequest) ProtoMessage()    {}
func (*QueryMembershipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{4}
}
func (m *QueryMembershipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMembershipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMembershipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMembershipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMembershipsRequest.Merge(m, src)
}
func (m *QueryMembershipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMembershipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMembershipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMembershipsRequest proto.InternalMessageInfo

type QueryMembershipsResponse struct {
	Memberships []*Membership `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
}

func (m *QueryMembershipsResponse) Reset()         { *m = QueryMembershipsResponse{} }
func (m *QueryMembershipsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMembershipsResponse) ProtoMessage()    {}
func (*QueryMembershipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{5}
}
func (m *QueryMembershipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMembershipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMembershipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMembershipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMembershipsResponse.Merge(m, src)
}
func (m *QueryMembershipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMembershipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMembershipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMembershipsResponse proto.InternalMessageInfo

func (m *QueryMembershipsResponse) GetMemberships() []*Membership {
	if m != nil {
		return m.Memberships
	}
	return nil
}

type QueryMembershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryMembershipRequest) Reset()         { *m = QueryMembershipRequest{} }
func (m *QueryMembershipRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMembershipRequest) ProtoMessage()    {}
func (*QueryMembershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{6}
}
func (m *QueryMembershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMembershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMembershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMembershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMembershipRequest.Merge(m, src)
}
func (m *QueryMembershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMembershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMembershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMembershipRequest proto.InternalMessageInfo

func (m *QueryMembershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryMembershipResponse struct {
	Membership *Membership `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (m *QueryMembershipResponse) Reset()         { *m = QueryMembershipResponse{} }
func (m *QueryMembershipResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMembershipResponse) ProtoMessage()    {}
func (*QueryMembershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{7}
}
func (m *QueryMembershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMembershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMembershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMembershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMembershipResponse.Merge(m, src)
}
func (m *QueryMembershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMembershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMembershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMembershipResponse proto.InternalMessageInfo

func (m *QueryMembershipResponse) GetMembership() *Membership {
	if m != nil {
		return m.Membership
	}
	return nil
}

type QueryFundsRequest struct {
}

func (m *QueryFundsRequest) Reset()         { *m = QueryFundsRequest{} }
func (m *QueryFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFundsRequest) ProtoMessage()    {}
func (*QueryFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{8}
}
func (m *QueryFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFundsRequest.Merge(m, src)
}
func (m *QueryFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFundsRequest proto.InternalMessageInfo

type QueryFundsResponse struct {
	Funds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
}

func (m *QueryFundsResponse) Reset()         { *m = QueryFundsResponse{} }
func (m *QueryFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFundsResponse) ProtoMessage()    {}
func (*QueryFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{9}
}
func (m *QueryFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFundsResponse.Merge(m, src)
}
func (m *QueryFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFundsResponse proto.InternalMessageInfo

func (m *QueryFundsResponse) GetFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Funds
	}
	return nil
}

type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{10}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b77900a1b2f9f07, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryInvitesRequest)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryInvitesRequest")
	proto.RegisterType((*QueryInvitesResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryInvitesResponse")
	proto.RegisterType((*QueryTspsRequest)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryTspsRequest")
	proto.RegisterType((*QueryTspsResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryTspsResponse")
	proto.RegisterType((*QueryMembershipsRequest)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryMembershipsRequest")
	proto.RegisterType((*QueryMembershipsResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryMembershipsResponse")
	proto.RegisterType((*QueryMembershipRequest)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryMembershipRequest")
	proto.RegisterType((*QueryMembershipResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryMembershipResponse")
	proto.RegisterType((*QueryFundsRequest)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryFundsRequest")
	proto.RegisterType((*QueryFundsResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryFundsResponse")
	proto.RegisterType((*QueryParams)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "commercionetwork.commercionetwork.commerciokyc.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("commercionetwork/commerciokyc/query.proto", fileDescriptor_2b77900a1b2f9f07)
}

var fileDescriptor_2b77900a1b2f9f07 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0x2a, 0x7f, 0xc2, 0xdb, 0x98, 0xe8, 0x03, 0x15, 0x1a, 0x53, 0x4c, 0x15, 0x58, 0x11,
	0x3a, 0xb2, 0x44, 0x0f, 0x72, 0x11, 0x30, 0xa0, 0x07, 0x0d, 0x6e, 0x3c, 0xa1, 0x97, 0xee, 0xee,
	0x58, 0x9a, 0xb5, 0x9d, 0xd2, 0xe9, 0x02, 0x1b, 0xe3, 0xc5, 0x4f, 0x60, 0xe2, 0xb7, 0xf0, 0x13,
	0x60, 0xe2, 0xd1, 0x03, 0x47, 0x12, 0x3d, 0x18, 0x0f, 0x6a, 0xc0, 0x0f, 0x62, 0x3a, 0x33, 0xed,
	0x16, 0xd0, 0x85, 0xdd, 0x9e, 0xb6, 0x7d, 0x3b, 0xf3, 0xfb, 0xf3, 0xf2, 0xde, 0x6f, 0x17, 0x6e,
	0xd5, 0x98, 0xe7, 0xd1, 0xb0, 0xe6, 0x32, 0x9f, 0x46, 0xdb, 0x2c, 0x6c, 0x90, 0xb4, 0xd0, 0x68,
	0xd5, 0xc8, 0x66, 0x93, 0x86, 0x2d, 0x2b, 0x08, 0x59, 0xc4, 0xd0, 0x3a, 0x7e, 0xb4, 0x43, 0xa1,
	0xd1, 0xaa, 0xe9, 0xd7, 0x1c, 0xc6, 0x9c, 0xd7, 0x94, 0xd8, 0x81, 0x4b, 0x6c, 0xdf, 0x67, 0x91,
	0x1d, 0xb9, 0xcc, 0xe7, 0x12, 0x4d, 0x9f, 0xae, 0x31, 0xee, 0x31, 0x4e, 0xaa, 0x36, 0xa7, 0x92,
	0x86, 0x6c, 0xcd, 0x55, 0x69, 0x64, 0xcf, 0x91, 0xc0, 0x76, 0x5c, 0x5f, 0x1c, 0x56, 0x67, 0xad,
	0xce, 0x22, 0x3d, 0xea, 0x55, 0x69, 0xc8, 0x37, 0xdc, 0xa0, 0x8d, 0xdd, 0xe9, 0x7c, 0x60, 0x87,
	0xb6, 0x97, 0xe8, 0x30, 0xb2, 0x3a, 0x12, 0x05, 0x35, 0xe6, 0x26, 0xdc, 0x23, 0x0e, 0x73, 0x98,
	0x78, 0x24, 0xf1, 0x93, 0xac, 0x9a, 0x97, 0x61, 0xf8, 0x59, 0xac, 0xf9, 0xb1, 0xbf, 0xe5, 0x46,
	0x94, 0x57, 0xe8, 0x66, 0x93, 0xf2, 0xc8, 0xdc, 0x80, 0x91, 0xa3, 0x65, 0x1e, 0x30, 0x9f, 0x53,
	0x5c, 0x83, 0x41, 0x57, 0x96, 0x46, 0xb5, 0xeb, 0xe7, 0x4b, 0xc5, 0xf2, 0xbd, 0x2e, 0x9b, 0x69,
	0x49, 0xc4, 0x4a, 0x02, 0x63, 0x22, 0x5c, 0x14, 0x4c, 0xcf, 0x79, 0x90, 0xb2, 0x4f, 0xc1, 0xa5,
	0x4c, 0x4d, 0x51, 0x23, 0xf4, 0x45, 0x3c, 0x90, 0xbc, 0x43, 0x15, 0xf1, 0x6c, 0x8e, 0xc1, 0x55,
	0x71, 0xf0, 0x49, 0xda, 0xb8, 0x14, 0x63, 0x07, 0x46, 0x4f, 0x7e, 0xa5, 0xa0, 0x5e, 0x42, 0xb1,
	0xdd, 0xea, 0xc4, 0xc9, 0xfd, 0x6e, 0x9d, 0xb4, 0x91, 0x2b, 0x59, 0x38, 0xb3, 0x0c, 0x57, 0x8e,
	0x31, 0x2b, 0x4d, 0x38, 0x0a, 0x83, 0x76, 0xbd, 0x1e, 0x52, 0x1e, 0x73, 0x6a, 0xa5, 0xa1, 0x4a,
	0xf2, 0x6a, 0x36, 0x4f, 0x18, 0x49, 0xc5, 0xae, 0x03, 0xb4, 0xd1, 0xc5, 0xbd, 0x7c, 0x5a, 0x33,
	0x68, 0xe6, 0xb0, 0x6a, 0xf4, 0x4a, 0xd3, 0xaf, 0xa7, 0x9d, 0xdb, 0x06, 0xcc, 0x16, 0x95, 0x0c,
	0x1b, 0xfa, 0x5f, 0xc5, 0x05, 0xd5, 0xad, 0x31, 0x4b, 0x8e, 0x9b, 0x15, 0x8f, 0x9b, 0xa5, 0xc6,
	0xcd, 0x5a, 0x66, 0xae, 0xbf, 0x74, 0x67, 0xef, 0xe7, 0x78, 0xe1, 0xe3, 0xaf, 0xf1, 0x92, 0xe3,
	0x46, 0x1b, 0xcd, 0x6a, 0x2c, 0x84, 0xa8, 0xd9, 0x94, 0x1f, 0xb3, 0xbc, 0xde, 0x20, 0x51, 0x2b,
	0xa0, 0x5c, 0x5c, 0xe0, 0x15, 0x89, 0x6c, 0x5e, 0x80, 0xa2, 0x20, 0x5e, 0x13, 0x63, 0x6d, 0x52,
	0x35, 0x9a, 0xf2, 0x35, 0x15, 0xf2, 0x14, 0x06, 0xe4, 0xdc, 0xab, 0x5e, 0x74, 0x3d, 0x81, 0x0a,
	0x4f, 0xa1, 0x94, 0x77, 0x87, 0xa0, 0x5f, 0xf0, 0xe0, 0x17, 0x0d, 0x06, 0xd5, 0xc0, 0xe3, 0x72,
	0xb7, 0xa8, 0xff, 0xd8, 0x22, 0xfd, 0x61, 0x3e, 0x10, 0x69, 0xd8, 0xb4, 0xde, 0x7d, 0xfd, 0xf3,
	0xe1, 0x5c, 0x09, 0x27, 0x49, 0xe7, 0x34, 0x50, 0x1b, 0x85, 0xbb, 0x1a, 0xf4, 0xc5, 0x9b, 0x83,
	0x0f, 0x7a, 0xa2, 0xcf, 0x2c, 0xa2, 0xbe, 0x98, 0x03, 0x41, 0xa9, 0xbf, 0x2d, 0xd4, 0x4f, 0xe0,
	0x8d, 0x53, 0xd4, 0xc7, 0xfb, 0x8c, 0xdf, 0x34, 0x28, 0x66, 0x16, 0x16, 0x57, 0x7b, 0xe2, 0x3f,
	0x99, 0x06, 0xfa, 0xa3, 0xfc, 0x40, 0xca, 0x4f, 0x59, 0xf8, 0x99, 0xc1, 0x69, 0x72, 0xd6, 0x2c,
	0xe7, 0xf8, 0x43, 0x03, 0x68, 0x63, 0xe1, 0x4a, 0x4e, 0x31, 0x89, 0xa9, 0xd5, 0xdc, 0x38, 0xca,
	0xd3, 0x82, 0xf0, 0x74, 0x17, 0xe7, 0xcf, 0xec, 0x89, 0xbc, 0x51, 0xc9, 0xf5, 0x16, 0x3f, 0x6b,
	0xd0, 0x2f, 0xa2, 0x02, 0x7b, 0x9b, 0x96, 0x6c, 0xf6, 0xe8, 0x4b, 0x79, 0x20, 0x94, 0x9b, 0x19,
	0xe1, 0x66, 0x12, 0x6f, 0x9e, 0xe2, 0x46, 0x84, 0x0e, 0x7e, 0xd2, 0x60, 0x40, 0x26, 0x02, 0x2e,
	0xf4, 0x44, 0x2e, 0x2f, 0xeb, 0xcb, 0x39, 0x2e, 0xa7, 0xd2, 0x67, 0x85, 0xf4, 0x29, 0x9c, 0x20,
	0x67, 0xf9, 0xe1, 0x5f, 0x7a, 0xb1, 0x77, 0x60, 0x68, 0xfb, 0x07, 0x86, 0xf6, 0xfb, 0xc0, 0xd0,
	0xde, 0x1f, 0x1a, 0x85, 0xfd, 0x43, 0xa3, 0xf0, 0xfd, 0xd0, 0x28, 0xac, 0x2f, 0x1e, 0xc9, 0xde,
	0xff, 0x41, 0x25, 0x85, 0x9d, 0x63, 0xab, 0x18, 0x47, 0x73, 0x75, 0x40, 0xfc, 0x41, 0x98, 0xff,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x64, 0xdd, 0x84, 0x59, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries all invites
	Invites(ctx context.Context, in *QueryInvitesRequest, opts ...grpc.CallOption) (*QueryInvitesResponse, error)
	// Queries a ivite by id.
	// Queries all Tsp.
	Tsps(ctx context.Context, in *QueryTspsRequest, opts ...grpc.CallOption) (*QueryTspsResponse, error)
	// Queries all memberships
	Memberships(ctx context.Context, in *QueryMembershipsRequest, opts ...grpc.CallOption) (*QueryMembershipsResponse, error)
	// Queries a membership by address
	Membership(ctx context.Context, in *QueryMembershipRequest, opts ...grpc.CallOption) (*QueryMembershipResponse, error)
	// Queries funds of ABR
	Funds(ctx context.Context, in *QueryFundsRequest, opts ...grpc.CallOption) (*QueryFundsResponse, error)
	// this line is used by starport scaffolding # 2
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Invites(ctx context.Context, in *QueryInvitesRequest, opts ...grpc.CallOption) (*QueryInvitesResponse, error) {
	out := new(QueryInvitesResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Invites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tsps(ctx context.Context, in *QueryTspsRequest, opts ...grpc.CallOption) (*QueryTspsResponse, error) {
	out := new(QueryTspsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Tsps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Memberships(ctx context.Context, in *QueryMembershipsRequest, opts ...grpc.CallOption) (*QueryMembershipsResponse, error) {
	out := new(QueryMembershipsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Memberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Membership(ctx context.Context, in *QueryMembershipRequest, opts ...grpc.CallOption) (*QueryMembershipResponse, error) {
	out := new(QueryMembershipResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Membership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Funds(ctx context.Context, in *QueryFundsRequest, opts ...grpc.CallOption) (*QueryFundsResponse, error) {
	out := new(QueryFundsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Funds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/commercionetwork.commercionetwork.commerciokyc.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries all invites
	Invites(context.Context, *QueryInvitesRequest) (*QueryInvitesResponse, error)
	// Queries a ivite by id.
	// Queries all Tsp.
	Tsps(context.Context, *QueryTspsRequest) (*QueryTspsResponse, error)
	// Queries all memberships
	Memberships(context.Context, *QueryMembershipsRequest) (*QueryMembershipsResponse, error)
	// Queries a membership by address
	Membership(context.Context, *QueryMembershipRequest) (*QueryMembershipResponse, error)
	// Queries funds of ABR
	Funds(context.Context, *QueryFundsRequest) (*QueryFundsResponse, error)
	// this line is used by starport scaffolding # 2
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Invites(ctx context.Context, req *QueryInvitesRequest) (*QueryInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invites not implemented")
}
func (*UnimplementedQueryServer) Tsps(ctx context.Context, req *QueryTspsRequest) (*QueryTspsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tsps not implemented")
}
func (*UnimplementedQueryServer) Memberships(ctx context.Context, req *QueryMembershipsRequest) (*QueryMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Memberships not implemented")
}
func (*UnimplementedQueryServer) Membership(ctx context.Context, req *QueryMembershipRequest) (*QueryMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Membership not implemented")
}
func (*UnimplementedQueryServer) Funds(ctx context.Context, req *QueryFundsRequest) (*QueryFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Funds not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Invites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Invites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invites(ctx, req.(*QueryInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tsps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTspsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tsps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Tsps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tsps(ctx, req.(*QueryTspsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Memberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Memberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Memberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Memberships(ctx, req.(*QueryMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Membership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Membership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Membership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Membership(ctx, req.(*QueryMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Funds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Funds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Funds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Funds(ctx, req.(*QueryFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commercionetwork.commercionetwork.commerciokyc.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commercionetwork.commercionetwork.commerciokyc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invites",
			Handler:    _Query_Invites_Handler,
		},
		{
			MethodName: "Tsps",
			Handler:    _Query_Tsps_Handler,
		},
		{
			MethodName: "Memberships",
			Handler:    _Query_Memberships_Handler,
		},
		{
			MethodName: "Membership",
			Handler:    _Query_Membership_Handler,
		},
		{
			MethodName: "Funds",
			Handler:    _Query_Funds_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commercionetwork/commerciokyc/query.proto",
}

func (m *QueryInvitesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInvitesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInvitesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInvitesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInvitesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInvitesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Invites) > 0 {
		for iNdEx := len(m.Invites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Invites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTspsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTspsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTspsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTspsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTspsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTspsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tsps) > 0 {
		for iNdEx := len(m.Tsps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tsps[iNdEx])
			copy(dAtA[i:], m.Tsps[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tsps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMembershipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMembershipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMembershipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMembershipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMembershipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMembershipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memberships) > 0 {
		for iNdEx := len(m.Memberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMembershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMembershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMembershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMembershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMembershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMembershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Membership != nil {
		{
			size, err := m.Membership.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInvitesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInvitesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Invites) > 0 {
		for _, e := range m.Invites {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTspsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTspsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tsps) > 0 {
		for _, s := range m.Tsps {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMembershipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMembershipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Memberships) > 0 {
		for _, e := range m.Memberships {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMembershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMembershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Membership != nil {
		l = m.Membership.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInvitesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInvitesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInvitesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInvitesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInvitesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInvitesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invites = append(m.Invites, &Invite{})
			if err := m.Invites[len(m.Invites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTspsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTspsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTspsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTspsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTspsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTspsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tsps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tsps = append(m.Tsps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMembershipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMembershipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMembershipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMembershipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMembershipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMembershipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memberships = append(m.Memberships, &Membership{})
			if err := m.Memberships[len(m.Memberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMembershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMembershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMembershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMembershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMembershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMembershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Membership", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Membership == nil {
				m.Membership = &Membership{}
			}
			if err := m.Membership.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
