(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{495:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"installing-a-full-node-with-statesync-dump"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-a-full-node-with-statesync-dump"}},[t._v("#")]),t._v(" Installing a full node with statesync dump")]),t._v(" "),s("p",[t._v("This guide  provides instructions for installing a CommercioNetwork node in Mainnet with statesync and using a dump snapshot from https://quicksync.commercio.network/ as a node data.")]),t._v(" "),s("p",[t._v("After you've setup your hardware following the "),s("RouterLink",{attrs:{to:"/nodes/hardware-requirements.html"}},[t._v("hardware requirements")]),t._v(" you are now ready to\nbecome a Commercio.network full node.")],1),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Make sure you have read the "),s("RouterLink",{attrs:{to:"/nodes/hardware-requirements.html"}},[t._v("hardware requirements")]),t._v(" before starting")],1)]),t._v(" "),s("h2",{attrs:{id:"_1-installing-the-software-requirements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-installing-the-software-requirements"}},[t._v("#")]),t._v(" 1. Installing the software requirements")]),t._v(" "),s("p",[t._v("Choose the name of your node. In the guide you will need to replace the variable "),s("code",[t._v("<your-moniker>")]),t._v(" with the name you choose\nIn order to update the OS so that you can work properly, execute the following commands:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" upgrade "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-y")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-y")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gcc "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" jq\nsnap "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--classic")]),t._v(" go\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("NODENAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<your-moniker>"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export GOPATH=\"$HOME/go\"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export PATH=\"$GOPATH/bin:$PATH\"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export PATH=\"$PATH:/snap/bin\"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"export NODENAME='),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODENAME")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" ~/.profile\n")])])]),s("h2",{attrs:{id:"_2-chain-selection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-chain-selection"}},[t._v("#")]),t._v(" 2. Chain selection")]),t._v(" "),s("p",[t._v("Select the mainnet chain and clone its repository")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CHAINVERSION")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("commercio-3\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rf")]),t._v(" commercio-chains\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" commercio-chains "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" commercio-chains\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/commercionetwork/chains.git "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAINVERSION")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3-install-binaries-and-setup-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-install-binaries-and-setup-configuration"}},[t._v("#")]),t._v(" 3. Install binaries and setup configuration")]),t._v(" "),s("p",[t._v("Compile binaries")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pkill")]),t._v(" commercionetworkd\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://github.com/commercionetwork/commercionetwork.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout tags/"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Release\\s+\\K\\S+'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\ngo mod verify\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("p",[t._v("Test if you have the correct binaries version. Get version from chain data")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Release\\s+\\K\\S+'")]),t._v("\n")])])]),s("p",[t._v("Compare the result with the output of command")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("commercionetworkd version\n")])])]),s("p",[t._v("Setup the validator node name. We will use the same name for node as well as the wallet key:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CHAINID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("commercio-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Name\\s+\\K\\S+'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile")]),t._v('\nexport CHAINID="'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAINID")]),t._v('"\nEOF')]),t._v("\n")])])]),s("p",[t._v("Init the "),s("code",[t._v(".commercionetwork")]),t._v(" folder with the basic configuration")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("commercionetworkd unsafe-reset-all "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--home")]),t._v(" ~/.commercionetwork\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you get a error because .commercionetwork folder is not present don't worry ")]),t._v("\n\ncommercionetworkd init "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODENAME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--home")]),t._v(" ~/.commercionetwork\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you get a error because .commercionetwork folder is present don't worry ")]),t._v("\n")])])]),s("p",[t._v("Change the persistent peers inside "),s("code",[t._v("config.toml")]),t._v(" file")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s|persistent_peers = '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(".*"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("|persistent_peers = "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Persistent peers\\s+\\K\\S+'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('|g"')]),t._v(" ~/.commercionetwork/config/config.toml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ~/.commercionetwork/config/config.toml.tmp\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" ~/.commercionetwork/config/config.toml.tmp  ~/.commercionetwork/config/config.toml\n")])])]),s("p",[t._v("Change the seeds inside the "),s("code",[t._v("config.toml")]),t._v(" file")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s|seeds = '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(".*"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("|seeds = "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Seeds\\s+\\K\\S+'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('|g"')]),t._v(" ~/.commercionetwork/config/config.toml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ~/.commercionetwork/config/config.toml.tmp\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" ~/.commercionetwork/config/config.toml.tmp  ~/.commercionetwork/config/config.toml\n")])])]),s("p",[t._v("Change "),s("code",[t._v("external_address")]),t._v(" value to contact your node using public ip of your node:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PUB_IP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-4")]),t._v(" icanhazip.com"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s|external_address = '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(".*"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("|external_address = "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PUB_IP")]),t._v(":26656"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('|g"')]),t._v(" ~/.commercionetwork/config/config.toml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ~/.commercionetwork/config/config.toml.tmp\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" ~/.commercionetwork/config/config.toml.tmp  ~/.commercionetwork/config/config.toml\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("At this point there may be some differences if you are using "),s("code",[t._v("KMS")]),t._v(" with "),s("code",[t._v("HSM")]),t._v(".")])]),t._v(" "),s("p",[t._v("If you are using a kms you have to configure the node so that it can accept the connection from the sign provider."),s("br"),t._v("\nUsually the connection is within a private lan network, or via vpn. Assuming that the validator node has an internal ip such as 10.1.1.1 the configuration to set up will be")]),t._v(" "),s("div",{staticClass:"language-toml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-toml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("priv_validator_laddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp://10.1.1.1:26658"')]),t._v("\n")])])]),s("p",[t._v("Edit "),s("code",[t._v("~/.commercionetwork/config/config.toml")]),t._v(", search "),s("code",[t._v("priv_validator_laddr")]),t._v(", and modify the configuration.")]),t._v(" "),s("p",[s("strong",[t._v("WARN")]),t._v(": the configuration of KMS must already be done.")]),t._v(" "),s("h2",{attrs:{id:"_4-download-the-statesynced-node-snapshot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-download-the-statesynced-node-snapshot"}},[t._v("#")]),t._v(" 4. Download the statesynced node snapshot")]),t._v(" "),s("p",[t._v("Download the statesynced node snapshot and extract the data folder")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://quicksync.commercio.network/'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAINID")]),t._v('-statesync.latest.tgz"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-P")]),t._v(" ~/.commercionetwork/\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Check if the checksum matches the one present inside https://quicksync.commercio.network")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/.commercionetwork/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-zxf")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAINID")]),t._v("-statesync.latest.tgz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CHAINID")]),t._v("-statesync.latest.tgz\n")])])]),s("h2",{attrs:{id:"_5-install-and-config-cosmovisor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-install-and-config-cosmovisor"}},[t._v("#")]),t._v(" 5. Install and config cosmovisor")]),t._v(" "),s("h3",{attrs:{id:"what-is-cosmovisor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-cosmovisor"}},[t._v("#")]),t._v(" What is cosmovisor?")]),t._v(" "),s("p",[s("code",[t._v("cosmovisor")]),t._v(" is a small process manager for Cosmos SDK application binaries that monitors the governance module for incoming chain upgrade proposals.\nIf it sees a proposal that gets approved, cosmovisor can automatically download the new binary, stop the current binary, switch from the old binary to the new one, and finally restart the node with the new binary."),s("br"),t._v(" "),s("strong",[t._v("As in all other explanations, it is assumed that you are acting as root. Change the parameters and variables depending on your installation environment")])]),t._v(" "),s("h3",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),s("p",[t._v("Download and compile cosmovisor:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/cosmos/cosmos-sdk.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" cosmos-sdk\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout cosmovisor/v1.3.0\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" cosmovisor\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" cosmovisor\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" cosmovisor "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/go/bin\n")])])]),s("p",[t._v("Make cosmovisor folder structure:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/.commercionetwork/cosmovisor/genesis/bin\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/.commercionetwork/cosmovisor/upgrades\n")])])]),s("p",[t._v("Copy "),s("code",[t._v("commercionetwork")]),t._v(" to cosmovisor folder")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/go/bin/commercionetworkd "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/.commercionetwork/cosmovisor/genesis/bin\n")])])]),s("p",[t._v("After installation your "),s("code",[t._v(".commercionetwork")]),t._v(" folder should be structured like below")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(".commercionetwork\n├── config\n│   └── app.toml\n│   └── config.toml\n│   └── genesis.json\n│   └── node_key.json\n│   └── priv_validator_key.json\n├── data\n│   └── priv_validator_state.json\n└── cosmovisor\n    └── current -> /path/to/the/current/version/of/commercionetworkd\n    └── genesis\n    │   └── bin\n    │      └── commercionetworkd\n    └── upgrades\n        └── <name>\n           └── bin\n               └── commercionetworkd\n")])])]),s("p",[t._v("Configure the service:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/systemd/system/commercionetworkd.service "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('EOF  \n[Unit]\nDescription=Commercio Network Node\nAfter=network.target\n\n[Service]\nUser=root\nLimitNOFILE=4096\n\nRestart=always\nRestartSec=3\n\nEnvironment="DAEMON_NAME=commercionetworkd"\nEnvironment="DAEMON_HOME=/root/.commercionetwork"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\nEnvironment="DAEMON_LOG_BUFFER_SIZE=512"\nEnvironment="UNSAFE_SKIP_BACKUP=true"\n\nExecStart=/root/go/bin/cosmovisor run start --home="/root/.commercionetwork" \n\n[Install]\nWantedBy=multi-user.target\nEOF')]),t._v("\n")])])]),s("p",[t._v("Set env of cosmovisor for you convenience")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export DAEMON_NAME=commercionetworkd'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export DAEMON_HOME=/root/.commercionetwork'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export DAEMON_RESTART_AFTER_UPGRADE=true'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export DAEMON_ALLOW_DOWNLOAD_BINARIES=false'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export DAEMON_LOG_BUFFER_SIZE=512'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export UNSAFE_SKIP_BACKUP=true'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" ~/.profile\n")])])]),s("h2",{attrs:{id:"_6-start-service-and-sync-the-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-start-service-and-sync-the-node"}},[t._v("#")]),t._v(" 6. Start service and sync the node")]),t._v(" "),s("p",[t._v("Now you can start your full node. Enable the newly created service and try to start it using:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("systemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" commercionetworkd  \nsystemctl start commercionetworkd\n")])])]),s("p",[t._v("Check if the sync has been started. Use "),s("code",[t._v("Ctrl + C")]),t._v(" to interrupt the "),s("code",[t._v("journalctl")]),t._v(" command:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("journalctl "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" commercionetworkd "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);